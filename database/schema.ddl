DROP SCHEMA IF EXISTS TSPORTS CASCADE;
CREATE SCHEMA TSPORTS;
SET search_path TO TSPORTS;


DROP TABLE IF EXISTS Users CASCADE;
DROP TABLE IF EXISTS Location CASCADE;
DROP TABLE IF EXISTS Sports CASCADE;
DROP TABLE IF EXISTS Interests CASCADE;
DROP TABLE IF EXISTS PlaySport CASCADE;
DROP TABLE IF EXISTS Friends_Status CASCADE;
DROP TABLE IF EXISTS Friends CASCADE;
DROP TABLE IF EXISTS Update_Friends CASCADE;
DROP TABLE IF EXISTS Conversation CASCADE;
DROP TABLE IF EXISTS Conversation_Reply CASCADE;
DROP TABLE IF EXISTS Event CASCADE;
DROP TABLE IF EXISTS Events CASCADE;
DROP TABLE IF EXISTS Event_Conversation_Reply CASCADE;


CREATE TABLE PlaySport
(
	sportid INTEGER REFERENCES Sports(id) ON DELETE CASCADE,
	userid  INTEGER REFERENCES Users(id) ON DELETE CASCADE,
	sumRating REAL DEFAULT 0.0,
	totalNumOfRatings INTEGER DEFAULT 0,
	PRIMARY KEY(sportid, userid)
);





CREATE TABLE Update_Friends(
	id SERIAL PRIMARY KEY,
	update_status VARCHAR(45),
	userid INTEGER REFERENCES Users(id) ON DELETE CASCADE
);

-- status: Open or closed
CREATE TABLE Conversation(
	id serial PRIMARY KEY,
	from_user INTEGER REFERENCES Users(id) ON DELETE CASCADE,
	to_user INTEGER REFERENCES Users(id) ON DELETE CASCADE,
	time TIMESTAMP DEFAULT now(),
	status VARCHAR(50) NOT NULL
);

/*
	status: Read/Unread/Deleted
*/

CREATE TABLE Conversation_Reply(
	id serial PRIMARY KEY,
	from_user INTEGER REFERENCES Users(id) ON DELETE CASCADE,
	reply_text text NOT NULL,
	sent TIMESTAMP DEFAULT now(),
	status VARCHAR(50) NOT NULL,
	conversation_id INTEGER REFERENCES Conversation(id)
);





CREATE TABLE Event_Conversation_Reply(
	id serial PRIMARY KEY,
	sentBy INTEGER REFERENCES Users(id) ON DELETE CASCADE,
	reply_text text,
	sent TIMESTAMP DEFAULT now(),
	status VARCHAR(50) NOT NULL,
	conversation_id INTEGER REFERENCES Event(id)
);
